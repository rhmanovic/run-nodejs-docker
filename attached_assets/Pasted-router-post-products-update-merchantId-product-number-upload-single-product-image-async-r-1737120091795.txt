router.post('/products/update/:merchantId/:product_number', upload.single('product_image'), async (req, res) => {
  try {
    const { merchantId, product_number } = req.params;
    const {
      product_name_en, product_name_ar, category_number, order_command, weight,
      keywords, youtube_video_id, description_ar, description_en,
      sale_price, purchase_price, purchase_limit, barcode, 
      pdt_discount_type, pdt_discount, Stock, brand, warranty, 
      warehouse_stock,
      v_name_en = [], v_name_ar = [], v_sale_price = [], v_purchase_price = [],
      v_available_quantity = [], v_warehouse_stock = [], v_purchase_limit = [],
      v_barcode = [], v_brand = [], v_warranty = [], v_show = []
    } = req.body;

    // Find existing product
    const product = await Product.findOne({ product_number, merchant: merchantId });
    if (!product) {
      return res.status(404).json({ success: false, message: 'Product not found' });
    }

    // Update variations if provided
    if (v_name_en.length > 0) {
      product.variations = v_name_en.map((_, index) => ({
        _id: product.variations[index]?._id || new mongoose.Types.ObjectId(),
        v_original_id: product.variations[index]?._id || new mongoose.Types.ObjectId(),
        v_name_en: v_name_en[index] || '',
        v_name_ar: v_name_ar[index] || '',
        v_sale_price: v_sale_price[index] || 0,
        v_purchase_price: v_purchase_price[index] || 0,
        v_available_quantity: v_available_quantity[index] || 0,
        v_show: v_show[index] === 'true' || v_show[index] === true,
        v_warehouse_stock: v_warehouse_stock[index] || 0,
        v_purchase_limit: v_purchase_limit[index] || 0,
        v_barcode: v_barcode[index] || '',
        v_brand: v_brand[index] || '',
        v_warranty: v_warranty[index] || ''
      }));
    }

    // Update product fields
    product.product_name_en = product_name_en;
    product.product_name_ar = product_name_ar;
    product.category_number = category_number;
    product.brand = brand;
    product.warranty = warranty;
    product.order_command = order_command || 0;
    product.weight = weight || 0;
    product.keywords = keywords || '';
    if (req.file) {
      product.product_image = req.file.path.replace('public', '');
    }
    product.youtube_video_id = youtube_video_id || '';
    product.description_ar = description_ar || '';
    product.description_en = description_en || '';
    product.sale_price = sale_price || 0;
    product.purchase_price = purchase_price;
    product.purchase_limit = purchase_limit;
    product.warehouse_stock = warehouse_stock;
    product.barcode = barcode || '';
    product.pdt_discount_type = pdt_discount_type || 'nodiscount';
    product.pdt_discount = pdt_discount || 0;
    product.Stock = Stock || 0;

    await product.save();
    res.status(200).json({ success: true, product });
  } catch (error) {
    console.error('Failed to update product:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});
    const merchantId = req.params.merchantId;
    const {
      product_number, product_name_en, product_name_ar, category_number, order_command, weight,
      keywords, youtube_video_id, description_ar, description_en,
      sale_price, purchase_price = 0, purchase_limit = 0, barcode, v_original_id = [],
      pdt_discount_type = '', pdt_discount = 0, Stock = 0, brand, warranty, 
      warehouse_stock = 0,
      v_name_en = [], v_name_ar = [], v_sale_price = [], v_purchase_price = [],
      v_available_quantity = [], v_warehouse_stock = [], v_purchase_limit = [],
      v_barcode = [], v_brand = [], v_warranty = [], v_show = []
    } = req.body;

    // Create variations array
    let variations = [];
    if (v_name_en.length > 0) {
      variations = v_name_en.map((_, index) => {
        const newId = new mongoose.Types.ObjectId();
        return {
          _id: newId,
          v_original_id: newId,
          v_name_en: v_name_en[index] || '',
          v_name_ar: v_name_ar[index] || '',
          v_sale_price: v_sale_price[index] || 0,
          v_purchase_price: v_purchase_price[index] || 0,
          v_available_quantity: v_available_quantity[index] || 0,
          v_show: v_show[index] === 'true' || v_show[index] === true,
          v_warehouse_stock: v_warehouse_stock[index] || 0,
          v_purchase_limit: v_purchase_limit[index] || 0,
          v_barcode: v_barcode[index] || '',
          v_brand: v_brand[index] || '',
          v_warranty: v_warranty[index] || ''
        };
      });
    }

    // Create the new product with proper boolean values
    const product = new Product({
      product_number,
      product_name_en,
      product_name_ar,
      category_number,
      brand,
      warranty,
      order_command: order_command || 0,
      weight: weight || 0,
      keywords: keywords || '',
      product_image: req.file ? req.file.path.replace('public', '') : '',
      youtube_video_id: youtube_video_id || '',
      options: false, // Set default boolean value
      standard_sizes: false, // Set default boolean value
      description_ar: description_ar || '',
      description_en: description_en || '',
      merchant: merchantId,
      sale_price: sale_price || 0,
      purchase_price,
      purchase_limit,
      warehouse_stock,
      barcode: barcode || '',
      pdt_discount_type: pdt_discount_type || 'nodiscount',
      pdt_discount: pdt_discount || 0,
      Stock: Stock || 0,
      variations
    });

    await product.save();
    res.status(201).json({ success: true, product });
  } catch (error) {
    console.error('Failed to create product:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

