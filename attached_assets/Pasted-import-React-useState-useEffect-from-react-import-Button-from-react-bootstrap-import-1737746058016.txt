import React, { useState, useEffect } from "react";
import { Button } from 'react-bootstrap';
import axios from "axios";
import { useParams, useNavigate } from "react-router-dom";
import { Card, Container, Row, Col } from "react-bootstrap";
import ProductModal from "../modals/ProductModal";
import SimpleProductModal from "../modals/SimpleProductModal";
import "../style/App.css";

import { BASE_URL } from "../config";

function CategoryProducts({ language, onAddToCart, cart, merchant }) {
  const { categoryNumber } = useParams();
  const navigate = useNavigate();
  const [products, setProducts] = useState([]);
  const [offers, setOffers] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showSimpleModal, setShowSimpleModal] = useState(false);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!merchant) {
      setError("Please log in to view products.");
      return;
    }

    console.log(`Fetching products for category number: ${categoryNumber}`);
    const merchantId = merchant.id || merchant._id;

    if (!merchantId) {
      setError("Merchant ID is not available.");
      return;
    }

    setLoading(true);
    axios
      .get(`${BASE_URL}/api/categories/${categoryNumber}/products/${merchantId}`)
      .then((response) => {
        console.log("Fetched products and offers:", response.data);
        const { products, offers } = response.data;
        setProducts(products);
        setOffers(offers);
        setError(null);
      })
      .catch((error) => {
        console.error("Error fetching products and offers:", error);
        setError("Failed to fetch products. Please try again later.");
      })
      .finally(() => {
        setLoading(false);
      });
  }, [categoryNumber, merchant]);

  const [pressTimer, setPressTimer] = useState(null);

  const handleProductMouseDown = (product) => {
    if (!(merchant?.isMerchantLogin || merchant?.subuser?.permissions?.products?.edit)) {
      return;
    }
    
    const timer = setTimeout(async () => {
      try {
        const merchantId = merchant.id || merchant._id;
        const response = await axios.get(`${BASE_URL}/api/products/number/${product.product_number}/${merchantId}`);
        const productData = response.data.product;
        
        navigate('/product/create', { 
          state: { 
            categoryNumber: categoryNumber,
            editMode: true,
            productData: {
              ...productData,
              product_name_en: productData.product_name_en,
              product_name_ar: productData.product_name_ar,
              brand: productData.brand,
              warranty: productData.warranty,
              order_command: productData.order_command,
              sale_price: productData.sale_price,
              purchase_price: productData.purchase_price,
              barcode: productData.barcode,
              Stock: productData.Stock,
              category_number: productData.category_number,
              weight: productData.weight,
              keywords: productData.keywords,
              youtube_video_id: productData.youtube_video_id,
              description_ar: productData.description_ar,
              description_en: productData.description_en,
              purchase_limit: productData.purchase_limit,
              warehouse_stock: productData.warehouse_stock,
              pdt_discount_type: productData.pdt_discount_type,
              pdt_discount: productData.pdt_discount,
              options: productData.options,
              standard_sizes: productData.standard_sizes
            }
          } 
        });
      } catch (error) {
        console.error('Error fetching product data:', error);
      }
    }, 1000); // 1 second long press
    setPressTimer(timer);
  };

  const handleProductMouseUp = () => {
    if (pressTimer) {
      clearTimeout(pressTimer);
      setPressTimer(null);
    }
  };

  const handleProductClick = (product) => {
    if (pressTimer) {
      clearTimeout(pressTimer);
      setPressTimer(null);
    }
    
    if (product.variations && product.variations.length > 0) {
      setSelectedProduct(product);
      setShowModal(true);
    } else {
      setSelectedProduct(product);
      setShowSimpleModal(true);
    }
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedProduct(null);
  };

  const handleCloseSimpleModal = () => {
    setShowSimpleModal(false);
    setSelectedProduct(null);
  };

  const handleVariantClick = (variant) => {
    setSelectedVariant(variant);
    setShowModal(true);
  };

  if (!merchant) {
    return (
      <div className="container text-center my-5">
        <h3>الرجاء تسجيل الدخول لعرض المنتجات</h3>
        <h3>Please log in to view products</h3>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="container text-center my-5">
        <h3>Loading products...</h3>
      </div>
    );
  }

  if (error) {
    return (
      <Container className="main mt-0">
        <h3 className="text-center">{error}</h3>
        <Row className="mt-5">
          <Col xs={6} md={4} lg={3} className="mb-4">
            <Card
              style={{ cursor: "pointer", textAlign: "center", height: "100%", backgroundColor: "#f8f9fa", border: "2px dashed #dee2e6" }}
              onClick={() => navigate('/product/create', { 
                state: { 
                  categoryNumber: categoryNumber
                } 
              })}
            >
              {(merchant?.isMerchantLogin || merchant?.subuser?.permissions?.products?.create) && (
                <Card.Body className="d-flex flex-column justify-content-center">
                  <div style={{ fontSize: "3rem", color: "#6c757d" }}>+</div>
                  <Card.Title>{language === "EN" ? "Add Product" : "إضافة منتج"}</Card.Title>
                </Card.Body>
              )}
            </Card>
          </Col>
        </Row>
      </Container>
    );
  }

  return (
    <Container className="main mt-0">
      <h1>Products</h1>

      {/* <div className="mb-4">
        <p><strong>Merchant Details:</strong></p>
        <p>ID: {merchant.id || merchant._id || "N/A"}</p>
        <p>Name: {merchant.name || "N/A"}</p>
        <p>Email: {merchant.email || "N/A"}</p>
        <p>Country: {merchant.country || "N/A"}</p>
        <p>Phone Number: {merchant.phoneNumber || "N/A"}</p>
      </div> */}

      <Row className="mt-5">
        {(merchant?.isMerchantLogin || merchant?.subuser?.permissions?.products?.create) && (
        <Col xs={6} md={4} lg={3} className="mb-4">
          <Card
            style={{ cursor: "pointer", textAlign: "center", height: "100%", backgroundColor: "#f8f9fa", border: "2px dashed #dee2e6" }}
            onClick={() => navigate('/product/create', { 
              state: { 
                categories: products[0]?.categories || [],
                categoryNumber: products[0]?.category_number || ''
              } 
            })}
          >
            
              <Card.Body className="d-flex flex-column justify-content-center">
                <div style={{ fontSize: "3rem", color: "#6c757d" }}>+</div>
                <Card.Title>{language === "EN" ? "Add Product" : "إضافة منتج"}</Card.Title>
              </Card.Body>
            
          </Card>
            
        </Col>
      )}
        {products.length === 0 ? (
          <Col>
            <p className="mt-3">No products available for this category.</p>
          </Col>
        ) : 
          products.map((product) => (
            <Col key={product._id} xs={6} md={4} lg={3} className="mb-4">
              <Card
                style={{ cursor: "pointer", textAlign: "center" }}
                onClick={() => handleProductClick(product)}
                onMouseDown={() => handleProductMouseDown(product)}
                onMouseUp={handleProductMouseUp}
                onTouchStart={() => handleProductMouseDown(product)}
                onTouchEnd={handleProductMouseUp}
              >
                <img
                  className="card-img-top"
                  src={
                    product.product_image
                      ? `${BASE_URL}${product.product_image}`
                      : "https://via.placeholder.com/150"
                  }
                  alt={
                    language === "EN"
                      ? product.product_name_en
                      : product.product_name_ar
                  }
                  style={{ height: "200px", objectFit: "cover" }}
                />
                <Card.Body className="d-flex flex-column justify-content-center">
                  <Card.Title>
                    {language === "EN"
                      ? product.product_name_en
                      : product.product_name_ar}
                  </Card.Title>
                </Card.Body>
                <Card.Footer className="text-muted" style={{ backgroundColor: '#f8f9fa', borderTop: '1px solid #dee2e6' }}>
                  <div className="d-flex justify-content-between align-items-center">
                    <small>{product.latest_FIFO}</small>
                    <small>{product.sale_price?.toFixed(3) || '0.000'} KWD</small>
                  </div>
                  <div className="d-flex justify-content-between align-items-center mt-1">
                    <small>Stock:</small>
                    <small className={`badge ${product.Stock > 0 ? 'bg-success' : 'bg-danger'}`}>
                      {product.Stock || 0}
                    </small>
                  </div>
                  <Button 
                    variant="outline-secondary"
                    size="sm"
                    className="w-100 mt-2"
                    onClick={(e) => {
                      e.stopPropagation();
                      navigate(`/product-logs/${product.product_number}`);
                    }}
                  >
                    {language === 'EN' ? 'Logs' : 'حركة'}
                  </Button>
                </Card.Footer>
              </Card>
            </Col>
          ))
        }
      </Row>

      <ProductModal
        show={showModal}
        handleClose={handleCloseModal}
        product={selectedProduct}
        language={language}
        onAddToCart={onAddToCart}
        cart={cart}
      />

      <SimpleProductModal
        show={showSimpleModal}
        handleClose={handleCloseSimpleModal}
        product={selectedProduct}
        language={language}
        onAddToCart={onAddToCart}
        cart={cart}
      />
    </Container>
  );
}

export default CategoryProducts;