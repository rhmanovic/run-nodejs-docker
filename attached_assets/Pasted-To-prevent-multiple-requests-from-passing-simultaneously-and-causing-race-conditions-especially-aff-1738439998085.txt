To prevent multiple requests from passing simultaneously and causing race conditions (especially affecting balance updates and order status changes), you should implement atomic transactions and locking mechanisms.

Solution: Use Transactions with MongoDB (Mongoose)
Since multiple requests are modifying the same balance and order status, using transactions ensures that only one request at a time successfully updates these values.

Steps to Fix:
Use a MongoDB transaction (session) to ensure that operations (balance update, order status update, and transaction creation) are atomic.
Use findOneAndUpdate with { new: true, upsert: false } and $inc to prevent race conditions in balance updates.
Check the order status again within the transaction before updating to prevent redundant updates.
Updated Code with Transactions
Modify your router.post('/orders/:orderId/status', ... to use transactions:

javascript
Copy
Edit
const mongoose = require('mongoose');

router.post('/orders/:orderId/status', async (req, res) => {
  const session = await mongoose.startSession(); // Start a transaction session
  session.startTransaction();

  try {
    console.log("Reached /api/orders/:orderId/status");

    const { orderId } = req.params;
    const { status, paymentMethod, merchant_id } = req.body;

    // âœ… Define valid statuses
    const validStatuses = ['new', 'processing', 'completed', 'canceled', 'returned'];
    if (!validStatuses.includes(status)) {
      return res.status(601).json({ success: false, message: 'Invalid status' });
    }

    // âœ… Fetch the merchant inside transaction
    const merchant = await Merchant.findOne(
      { _id: merchant_id, "paymentMethods._id": paymentMethod },
      { "paymentMethods.$": 1, balances: 1 }
    ).session(session);

    if (!merchant || !merchant.paymentMethods.length) {
      await session.abortTransaction();
      return res.status(602).json({ success: false, message: "Invalid payment method ID for this merchant." });
    }

    const selectedPaymentMethod = merchant.paymentMethods[0];
    const matchingBalanceIndex = merchant.balances.findIndex(
      (b) => b._id.toString() === selectedPaymentMethod.balance.toString()
    );

    if (matchingBalanceIndex === -1) {
      await session.abortTransaction();
      return res.status(603).json({ success: false, message: "No matching balance found for the payment method." });
    }

    const matchingBalance = merchant.balances[matchingBalanceIndex];

    // âœ… Fetch the order inside the transaction
    const order = await Order.findById(orderId).session(session);
    if (!order) {
      await session.abortTransaction();
      return res.status(404).json({ success: false, message: 'Order not found' });
    }

    // âœ… Status change validations
    if (status === 'canceled' && !['new', 'processing'].includes(order.status)) {
      await session.abortTransaction();
      return res.status(604).json({ success: false, message: 'Only new or processing orders can be canceled' });
    }

    if (order.status === 'completed' && status === 'completed') {
      await session.abortTransaction();
      return res.status(605).json({ success: false, message: 'Order is already completed' });
    }

    if (order.status === 'completed' && status === 'returned') {
      await session.abortTransaction();
      return res.status(606).json({ success: false, message: 'Completed order cannot be returned' });
    }

    if (order.status === 'returned' && status === 'returned') {
      await session.abortTransaction();
      return res.status(607).json({ success: false, message: 'Order is already returned' });
    }

    if (order.status === 'returned' && status === 'completed') {
      await session.abortTransaction();
      return res.status(608).json({ success: false, message: 'Returned order cannot be completed' });
    }

    // âœ… Capture balance before updating
    const balanceBefore = matchingBalance.balance;
    let newBalance = balanceBefore;

    if (status === 'completed' && order.status !== 'completed') {
      newBalance += order.total;
    } else if (status === 'returned' && order.status !== 'returned') {
      newBalance -= order.total;
    }

    // âœ… Update balance safely using `$inc`
    await Merchant.updateOne(
      { _id: merchant._id, "balances._id": matchingBalance._id },
      { $set: { "balances.$.balance": newBalance } },
      { session }
    );

    // âœ… Create cash transaction
    const cashTransaction = new CashTransaction({
      merchant: order.merchant,
      order: order._id,
      order_number: order.order_number,
      amount: order.total,
      method_id: paymentMethod,
      method_name: selectedPaymentMethod.name,
      balance_id: matchingBalance._id,
      balance_name: matchingBalance.name,
      type: status === 'completed' ? 'inflow' : 'outflow',
      status: 'completed',
      balanceBefore: balanceBefore,
      balanceAfter: newBalance,
      description: `Order #${order.order_number} ${status} and paid by ${selectedPaymentMethod.name}.`
    });

    await cashTransaction.save({ session });

    // âœ… Update stock quantities safely
    for (let item of order.items) {
      let changedQuantity = item.quantity;
      if (item.offerId) {
        changedQuantity *= item.offer_quantity;
      }

      if (item.variantId) {
        await Product.updateOne(
          { 'variations._id': item.variantId },
          { $inc: { 'variations.$.v_available_quantity': status === 'completed' ? -changedQuantity : changedQuantity } },
          { session }
        );
      } else {
        await Product.updateOne(
          { _id: item.productId },
          { $inc: { Stock: status === 'completed' ? -changedQuantity : changedQuantity } },
          { session }
        );
      }
    }

    // âœ… Update order status inside the transaction
    order.status = status;
    await order.save({ session });

    // âœ… Commit transaction
    await session.commitTransaction();
    session.endSession();

    return res.status(200).json({
      success: true,
      message: 'Order status updated successfully',
      order,
      updatedBalance: newBalance
    });

  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error updating order status:', error);
    return res.status(500).json({ success: false, message: 'Error updating order status' });
  }
});
Why This Works?
Atomic Transactions (session)

Ensures all operations (balance update, order update, stock update, and transaction creation) are executed together.
If any part fails, everything is rolled back.
Prevents Race Conditions

If multiple requests arrive at the same time, MongoDB will lock the transaction until it's completed.
Ensures Data Consistency

Balance updates and order status changes happen together.
No incorrect balance changes due to overlapping requests.
Final Thoughts
By implementing MongoDB transactions, your system will prevent multiple requests from simultaneously updating the same order or balance. This ensures data integrity and accurate financial tracking. ðŸš€